# ============================================
# Dockerfile for Python Agent SDK Service
# Deployment: Render (Claude Agent SDK for WhatsApp)
# Multi-stage build for memory optimization
# ============================================

# Stage 1: Builder (installs build dependencies)
FROM python:3.12-slim AS builder

# ============================================
# System Setup
# ============================================
WORKDIR /app

# Install system dependencies, Node.js, Git, and Playwright browser dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    gnupg \
    git \
    procps \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2 \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Install Claude Code CLI and MCP servers globally
# Pre-installing these prevents npx from downloading at runtime (which times out)
RUN echo "üì¶ Installing npm packages..." && \
    npm install -g @anthropic-ai/claude-code && echo "‚úÖ @anthropic-ai/claude-code installed" || echo "‚ùå @anthropic-ai/claude-code FAILED" && \
    npm install -g @modelcontextprotocol/server-github && echo "‚úÖ @modelcontextprotocol/server-github installed" || echo "‚ùå @modelcontextprotocol/server-github FAILED" && \
    npm install -g @netlify/mcp && echo "‚úÖ @netlify/mcp installed" || echo "‚ùå @netlify/mcp FAILED" && \
    npm install -g @neondatabase/mcp-server-neon && echo "‚úÖ @neondatabase/mcp-server-neon installed" || echo "‚ùå @neondatabase/mcp-server-neon FAILED" && \
    npm install -g @playwright/mcp && echo "‚úÖ @playwright/mcp installed" || echo "‚ùå @playwright/mcp FAILED" && \
    echo "" && echo "üìã Verification - Installed packages:" && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@anthropic-ai/claude-code" && echo "  ‚úì claude-code" || echo "  ‚úó claude-code MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@modelcontextprotocol/server-github" && echo "  ‚úì server-github" || echo "  ‚úó server-github MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@netlify/mcp" && echo "  ‚úì netlify/mcp" || echo "  ‚úó netlify/mcp MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@neondatabase/mcp-server-neon" && echo "  ‚úì neon/mcp" || echo "  ‚úó neon/mcp MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@playwright/mcp" && echo "  ‚úì playwright/mcp" || echo "  ‚úó playwright/mcp MISSING")

# Install Playwright Chromium browser (headless mode for server deployment)
RUN echo "üåê Installing Playwright Chromium browser..." && \
    npx playwright@latest install chromium --with-deps && \
    echo "‚úÖ Chromium browser installed"

# Create non-root user for security
RUN useradd -m -u 1001 agentuser

# ============================================
# Python Dependencies
# ============================================
# Copy requirements.txt first (for Docker layer caching)
COPY requirements.txt .

# Upgrade pip and install Python packages (use wheel cache for faster builds)
RUN pip install --upgrade pip && \
    pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt

# ============================================
# Stage 2: Runtime (minimal image)
# ============================================
FROM python:3.12-slim AS runtime

WORKDIR /app

# Install ONLY runtime dependencies (no build tools) + Playwright browser dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    git \
    procps \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2 \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install NPM packages globally with minimal cache
RUN echo "üì¶ Installing npm packages (runtime)..." && \
    npm install -g --production @anthropic-ai/claude-code && echo "‚úÖ @anthropic-ai/claude-code installed" || echo "‚ùå @anthropic-ai/claude-code FAILED" && \
    npm install -g --production @modelcontextprotocol/server-github && echo "‚úÖ @modelcontextprotocol/server-github installed" || echo "‚ùå @modelcontextprotocol/server-github FAILED" && \
    npm install -g --production @netlify/mcp && echo "‚úÖ @netlify/mcp installed" || echo "‚ùå @netlify/mcp FAILED" && \
    npm install -g --production @neondatabase/mcp-server-neon && echo "‚úÖ @neondatabase/mcp-server-neon installed" || echo "‚ùå @neondatabase/mcp-server-neon FAILED" && \
    npm install -g --production @playwright/mcp && echo "‚úÖ @playwright/mcp installed" || echo "‚ùå @playwright/mcp FAILED" && \
    npm cache clean --force && \
    echo "" && echo "üìã Verification - Installed packages:" && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@anthropic-ai/claude-code" && echo "  ‚úì claude-code" || echo "  ‚úó claude-code MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@modelcontextprotocol/server-github" && echo "  ‚úì server-github" || echo "  ‚úó server-github MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@netlify/mcp" && echo "  ‚úì netlify/mcp" || echo "  ‚úó netlify/mcp MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@neondatabase/mcp-server-neon" && echo "  ‚úì neon/mcp" || echo "  ‚úó neon/mcp MISSING") && \
    (npm list -g --depth=0 2>/dev/null | grep -E "@playwright/mcp" && echo "  ‚úì playwright/mcp" || echo "  ‚úó playwright/mcp MISSING")

# Install Playwright Chromium browser (runtime stage)
RUN echo "üåê Installing Playwright Chromium browser (runtime)..." && \
    npx playwright@latest install chromium --with-deps && \
    echo "‚úÖ Chromium browser installed"

# Copy Python wheels from builder and install
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/* \
    && rm -rf /wheels

# Verify critical packages are installed (informational only - doesn't fail build)
RUN echo "üêç Verifying Python packages..." && \
    (python -c "import fastapi" && echo "  ‚úÖ fastapi" || echo "  ‚ùå fastapi MISSING") && \
    (python -c "import anthropic" && echo "  ‚úÖ anthropic" || echo "  ‚ùå anthropic MISSING") && \
    (python -c "import redis" && echo "  ‚úÖ redis (optional)" || echo "  ‚ö†Ô∏è  redis not installed (optional - for caching)") && \
    (python -c "import slowapi" && echo "  ‚úÖ slowapi" || echo "  ‚ùå slowapi MISSING") && \
    (python -c "import sqlalchemy" && echo "  ‚úÖ sqlalchemy" || echo "  ‚ùå sqlalchemy MISSING") && \
    (python -c "import asyncpg" && echo "  ‚úÖ asyncpg" || echo "  ‚ùå asyncpg MISSING") && \
    (python -c "import mcp" && echo "  ‚úÖ mcp" || echo "  ‚ùå mcp MISSING") && \
    (python -c "import logfire" && echo "  ‚úÖ logfire" || echo "  ‚ùå logfire MISSING") && \
    (python -c "import opentelemetry.instrumentation.fastapi" && echo "  ‚úÖ opentelemetry.instrumentation.fastapi" || echo "  ‚ùå opentelemetry.instrumentation.fastapi MISSING") && \
    (python -c "import opentelemetry.instrumentation.httpx" && echo "  ‚úÖ opentelemetry.instrumentation.httpx" || echo "  ‚ùå opentelemetry.instrumentation.httpx MISSING") && \
    echo "‚úÖ Python package verification complete" || true

# Create non-root user
RUN useradd -m -u 1001 agentuser

# Copy application code
COPY --chown=agentuser:agentuser src/python/ ./src/python/

# Switch to non-root user
USER agentuser

# ============================================
# Environment Variables (Set in Render Dashboard)
# ============================================
# - ANTHROPIC_API_KEY (required)
# - WHATSAPP_ACCESS_TOKEN (required)
# - WHATSAPP_PHONE_NUMBER_ID (required)
# - WHATSAPP_WEBHOOK_VERIFY_TOKEN (required)
# - GITHUB_PERSONAL_ACCESS_TOKEN (optional)
# - NETLIFY_PERSONAL_ACCESS_TOKEN (optional)
# - NEON_API_KEY (optional - for Neon database MCP)
# - ENABLE_NEON_MCP (optional - set to "true" to enable Neon MCP, defaults to "false")
# - LOGFIRE_TOKEN (optional - for telemetry/observability)
# - ENABLE_LOGFIRE (optional - set to "true" to enable, defaults to "false")
# - ENV (optional - "development" or "production", defaults to "production")
# - PORT (automatically set by Render, defaults to 8000)

# ============================================
# Expose Port
# ============================================
EXPOSE 8000

# ============================================
# Health Check
# ============================================
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# ============================================
# Start FastAPI Agent Service
# ============================================
CMD ["python", "-u", "src/python/main.py"]
