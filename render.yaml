services:
  # ==========================================
  # WhatsApp MCP Service (All-in-One)
  # Runs Python Agent SDK + WhatsApp MCP in Docker
  # ==========================================
  - type: web
    name: whatsapp-mcp
    runtime: docker
    # Use standard plan ($25/month) for 2GB RAM
    # Multi-agent system requires more memory than single-agent
    # Starter plan (512MB) may cause memory issues with orchestrator
    plan: standard
    region: oregon # or 'frankfurt', 'singapore'

    # Docker configuration
    dockerfilePath: ./Dockerfile.render
    dockerContext: .

    # Health check endpoint
    healthCheckPath: /health

    # Environment variables
    # NOTE: Set these in Render dashboard (don't commit secrets!)
    envVars:
      # Claude API
      - key: ANTHROPIC_API_KEY
        sync: false  # Set manually in dashboard (REQUIRED)

      # WhatsApp Business API
      - key: WHATSAPP_ACCESS_TOKEN
        sync: false  # Set manually (REQUIRED)

      - key: WHATSAPP_PHONE_NUMBER_ID
        sync: false  # Set manually (REQUIRED)

      - key: WHATSAPP_WEBHOOK_VERIFY_TOKEN
        sync: false  # Set manually (REQUIRED)

      # GitHub MCP Integration
      - key: GITHUB_PERSONAL_ACCESS_TOKEN
        sync: false  # Set manually (OPTIONAL - for GitHub MCP)

      - key: ENABLE_GITHUB_MCP
        value: true  # Enable GitHub MCP server integration

      # Netlify MCP Integration
      - key: NETLIFY_PERSONAL_ACCESS_TOKEN
        sync: false  # Set manually (OPTIONAL - for Netlify MCP)

      - key: ENABLE_NETLIFY_MCP
        value: true  # Enable Netlify MCP server integration

      # Playwright MCP Integration
      - key: ENABLE_PLAYWRIGHT_MCP
        value: true  # Enable Playwright MCP server integration (browser automation)

      - key: PLAYWRIGHT_HEADLESS
        value: true  # Run browsers in headless mode (required for server deployment)

      # Agent System Prompt (for single-agent mode)
      - key: AGENT_SYSTEM_PROMPT
        value: "You are a professional CTO (Chief Technology Officer) assistant. You help users with technical architecture, code review, technology recommendations, team leadership, product development, technical debt management, and DevOps guidance. Respond professionally, concisely, and with practical technical insights."

      # Multi-Agent System (Phase 1.5+)
      # Note: Multi-agent mode is enabled automatically when ENABLE_NETLIFY_MCP=true
      # Webapp build requests will route to Designer + Frontend agents
      # Regular conversations use single-agent mode

      # Logfire Telemetry & Observability (OPTIONAL)
      # To enable telemetry:
      # 1. Get token from https://logfire.pydantic.dev/
      # 2. Set LOGFIRE_TOKEN in Render dashboard
      # 3. Set ENABLE_LOGFIRE to "true"
      - key: LOGFIRE_TOKEN
        sync: false  # Set manually in Render dashboard (OPTIONAL - for telemetry)

      - key: ENABLE_LOGFIRE
        value: false  # Set to "true" to enable Logfire telemetry and observability

      - key: ENV
        value: production  # Environment (development = 100% sampling, production = 10% sampling)

      # Service configuration
      - key: PORT
        value: 8000  # Default port (Render may override)

    # Auto-deploy when pushing to main branch
    autoDeploy: true

# ==========================================
# DEPLOYMENT INSTRUCTIONS:
# ==========================================
#
# This configuration deploys ONE service to Render that contains:
# 1. Python Claude Agent SDK Manager (FastAPI)
# 2. WhatsApp MCP server (messaging tools)
# 3. GitHub MCP server (repository management)
# 4. Netlify MCP server (site deployment and management)
# 5. Playwright MCP server (browser automation and web scraping)
# 6. Agent spawning and conversation management
#
# ARCHITECTURE:
# - WhatsApp User sends message
# - Webhook POST -> Render FastAPI service
# - Python Claude Agent SDK Manager spawns/retrieves agent per user
# - Agents use multiple MCP tools:
#   • WhatsApp MCP: Send messages back to users
#   • GitHub MCP: List/search/manage GitHub repositories
#   • Netlify MCP: Deploy sites, manage deployments, configure settings
#   • Playwright MCP: Automate browsers, scrape web content, test web apps
# - Response sent back via WhatsApp API
#
# SETUP STEPS:
# 1. Push this repo to GitHub
# 2. Go to render.com and sign up/login
# 3. Click "New" -> "Web Service"
# 4. Connect your GitHub repo
# 5. Render will use this render.yaml Blueprint
# 6. Set environment variables in Render dashboard:
#    REQUIRED:
#      - ANTHROPIC_API_KEY
#      - WHATSAPP_ACCESS_TOKEN
#      - WHATSAPP_PHONE_NUMBER_ID
#      - WHATSAPP_WEBHOOK_VERIFY_TOKEN
#    OPTIONAL (for GitHub MCP):
#      - GITHUB_PERSONAL_ACCESS_TOKEN
#    OPTIONAL (for Netlify MCP):
#      - NETLIFY_PERSONAL_ACCESS_TOKEN
#    OPTIONAL (for Logfire Telemetry):
#      - LOGFIRE_TOKEN (get from https://logfire.pydantic.dev/)
#      - ENABLE_LOGFIRE (set to "true")
# 7. Deploy!
#
# YOUR SERVICE URL:
# https://whatsapp-mcp-t9mi.onrender.com
#
# CONFIGURE WHATSAPP:
# 1. Go to Meta Business Suite -> WhatsApp -> Configuration
# 2. Set webhook URL: https://whatsapp-mcp-t9mi.onrender.com/webhook
# 3. Set verify token: (same as WHATSAPP_WEBHOOK_VERIFY_TOKEN)
# 4. Subscribe to 'messages' events
# 5. Test by sending a message to your WhatsApp Business number
#
# MCP CAPABILITIES:
# - GitHub: Create repos, search code, manage issues/PRs, create files
# - Netlify: Deploy sites from GitHub, manage deployments, configure env vars
# - Playwright: Navigate web pages, screenshot, scrape content, test web apps
# - WhatsApp: Send messages to users
#
# ==========================================
